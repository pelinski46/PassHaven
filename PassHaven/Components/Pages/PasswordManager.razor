@page "/passwordmanager"
@inject VaultController controller
@inject NavigationManager NavigationManager
@using PassHaven.Data
@using PassHaven.Models
@rendermode InteractiveServer

<PageTitle>PassHaven</PageTitle>

<h1>Vaults</h1>

<MudCardContent>
    @foreach (var vault in Vaults)
    {
        <div class="vault-item">
            <MudItem Style="font-size: large;">@vault.Name</MudItem>
            <MudButton Style="background-color: green; color: white; margin-left: 10px;" @onclick="() => OpenVault(vault.Id)">Open Vault</MudButton>
            <MudButton Style="background-color: red; color: white; margin-left: 10px;" @onclick="() => DeleteVault(vault.Id)">Delete</MudButton>
        </div>
    }
</MudCardContent>

<MudButton Variant="Variant.Filled" Style="background-color: mediumpurple; color: white;" class="btn btn-primary" @onclick="CreateVault">Create a new password vault</MudButton>
<MudButton Variant="Variant.Filled" Style="background-color: mediumpurple; color: white;" class="btn btn-primary" @onclick="EditVault">Edit password vault</MudButton>

@code {
    List<Vault> Vaults = new List<Vault>();

    protected override async Task OnInitializedAsync()
    {
        Vaults = await controller.GetVaultsAsync();
    }
    private void OpenVault(int vaultId)
    {
        NavigationManager.NavigateTo($"/passwordentries/{vaultId}");
    }

    private void CreateVault()
    {
        NavigationManager.NavigateTo("/createvault");
    }
    private void EditVault()
    {
        throw new NotImplementedException();
    }
    private async void DeleteVault(int vaultId)
    {
        await controller.DeleteVaultAsync(vaultId);
        Vaults = await controller.GetVaultsAsync();
    }
}
<style>
    .vault-item {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .action-buttons {
        margin-top: 20px;
    }
</style>