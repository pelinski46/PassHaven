@page "/passwordentries/{vaultId:int}"
@inject PasswordEntriesController controller
@inject NavigationManager NavigationManager
@inject VaultController vaultController
@using PassHaven.Models
@rendermode InteractiveServer

<PageTitle>PassHaven</PageTitle>

<h1>Password Entries</h1>

<ul>
        @foreach (var pass in passwordEntries)
        {
            if (pass.VaultId == VaultId)
            {
                <div>
                    <label for="name">Platform Name: </label>
                    <label>@pass.PlatformName</label>
                </div>
                <div>
                    <label for="email">Email: </label>
                    <label>@pass.Email</label>
                </div>
                <div>
                    <label for="password">Password: </label>
                    <label>@pass.PasswordHash</label> 
                </div>
            <MudButton Variant="Variant.Filled" Style="background-color: red; color: white;" @onclick="() => DeletePasswordEntry(pass.Id)">Delete</MudButton>
        }
        }
   
    
</ul>

<MudButton Variant="Variant.Filled" Style="background-color: mediumpurple; color: white;" class="btn btn-primary" @onclick="CreatePasswordEntry">Create a new password entry</MudButton>
<MudButton Variant="Variant.Filled" Style="background-color: mediumpurple; color: white;" class="btn btn-primary" @onclick="EditVault">Edit password entry</MudButton>

@code {
    [Parameter] public int VaultId { get; set; }
    List<PasswordEntry> passwordEntries = new List<PasswordEntry>();

    protected override async Task OnInitializedAsync()
    {
        passwordEntries = await controller.GetPasswordAsync();
    }

    private async void CreatePasswordEntry()
    {
        NavigationManager.NavigateTo($"/createpasswordentries/{VaultId}");
        passwordEntries = await controller.GetPasswordAsync();
    }
    private void EditVault()
    {
        throw new NotImplementedException();
    }
    private async void DeletePasswordEntry(int vaultId)
    {
        await controller.DeletepasswordAsync(vaultId);
        passwordEntries = await controller.GetPasswordAsync();
    }
}
